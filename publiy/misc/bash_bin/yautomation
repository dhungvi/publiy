#! /bin/bash

source common.sh
source common_automation.sh

if [ ! -d "$1" ]; then
    red "Invalid working directory: $1";
    exit -2; fi
workingdir="$1";

if [ -z "$2" ]; then
    red "Destination directory is missing!";
    exit -1; fi
destinationdir="$2";
skip_count=0;   ### Change this value for skipping initial executions.
skip_counter=0;
#
#

export guiAutomation="true";
check_files $workingdir .labtype .inbw .outbw .tickscaler .datasets
if [ $? -ne 0 ]; then
    red "MISSING some files :(";
    exit -1; fi

# Check .labtype
labtype="`cat $workingdir/.labtype`";
if [ "$labtype" != "CL" -a "$labtype" != "CL_NO_AFF" ]; then
    red "Wrong labtype $labtype ($0)";
    exit -1; fi

export guiAutomation="true";
datasets=`awk '!/\#/{printf "'$workingdir'/"\$0" "}' $workingdir/.datasets`;

sdelay="100";
startdate="`date`";
yellow "Starting @$startdate";

(
for II in `seq 5 6`; do
    if [ $II -eq 1 ]; then
         echo "backup_ready_masterOne+nX-n3_delta3_fanout20_w1000/" > $workingdir/.reuse;
    elif [ $II -eq 3 ]; then
         echo "backup_ready_masterOne+nX-n3_delta3_fanout15_w1000/" > $workingdir/.reuse;
    elif [ $II -eq 5 ]; then
         echo "backup_ready_masterOne+nX-n3_delta3_fanout10_w1000/" > $workingdir/.reuse;
    elif [ $II -eq 7 ]; then
         echo "backup_ready_masterOne+nX-n3_delta2_fanout20_w1000/" > $workingdir/.reuse;
    elif [ $II -eq 9 ]; then
         echo "backup_ready_masterOne+nX-n3_delta2_fanout15_w1000/" > $workingdir/.reuse;
    elif [ $II -eq 11 ]; then
         echo "backup_ready_masterOne+nX-n3_delta2_fanout10_w1000/" > $workingdir/.reuse;
    elif [ $II -eq 13 ]; then
         echo "backup_ready_masterOne+nX-n3_delta1_fanout15_w1000/" > $workingdir/.reuse;
    fi

for dataset in $datasets; do 
    dataset=${dataset:0:`expr match "$dataset" "[^#]*"`};
    if [ "$dataset" = "" ]; then continue; fi
    newdataset="1";
for pdelay in 2000; do
    echo "PDELAY => $pdelay" >> $workingdir/.summaries;
for brokerStrategyNo in 1 2 3; do
for brokerDelta in 3; do

    if [ $((++skip_counter)) -lt $skip_count ]; then red "Skipping D$brokerDelta, STR$brokerStrategyNo, sdelay=$sdelay, pdelay=$pdelay, dataset={$datasetdescriptor}"; continue; fi;

# WHILE_REPEAT
while [ "1" = "1" ]; do
    ############################
    # SLEEP if .stop is requested.

    wait_on_stop;


    ############################
    # INSTALL on new nodes new goodnodes.

    # Nothing really to install
    # on the cluster. This part is as
    # a result empty.
    #
    #
    #
    #
    #
    #

    brokerStrategy="STR$brokerStrategyNo";
    datasetdescriptor="`cat $dataset/data_descriptor`";
    echo "$pdelay" > "$workingdir/.pdelay";
    echo "$sdelay" > "$workingdir/.sdelay";
    yellow "RUNNING with D$brokerDelta, STR$brokerStrategyNo, sdelay=$sdelay, pdelay=$pdelay, dataset={$datasetdescriptor}";
    echo "$datasetdescriptor">$workingdir/.useddataset;
    echo "$brokerStrategyNo">$workingdir/.strategy;

    ############################
    # GENERATE PROPERTY FILES

    if [ "$repeat" = "1" ]; then
        green "SKIPPING chaning delays";
    else
        if [ -f "$workingdir/.reuse" ]; then
            reusedir="`cat $workingdir/.reuse`";
            while [ ! -d "$reusedir" ]; do
                stopthis $workingdir;
                wait_on_stop;
            done
            yellow "REUSING $reusedir/properties & deploy-*.sh";
            cp $workingdir/$reusedir/*.properties .;
            cp $workingdir/$reusedir/deploy*.sh .;
        else
           yellow "GENERATING property files ... ";
           generate_property_files $workingdir;
           green -en "DONE.\n";

           # Change deploy files
           yellow "CHANGING deploy files ";
           clab_change_all $workingdir;
           green -en "DONE.\n";
        fi
    fi

    yellow "CHANGING delays";
    sprops=$workingdir/s*.properties;
    change_pubsub_delay $sdelay $sprops;
    pprops=$workingdir/p*.properties;
    change_pubsub_delay $pdelay $pprops;
    green "DONE.";

    # QCHECK cluster nodes.
    yellow "QCHECK on the cluster...";
    clab_all $workingdir QCHECK $dataset;
    green -en "DONE.\n";
    sleep 5;

    repeat="0";
    if [ "$newdataset" = "1" ]; then
        clab_all "$workingdir" SYNC;
        newdataset="0";
        sleep 30; fi

    ############################
    # NOW RUN

    remote_sjar_version=`ssh -i $sshprivatekey $CL_USER@$CL_MASTER "java -cp $CL_SJAR sutils.SystemPackageVersion"`
    green "USED_SJAR_VERSION: $remote_sjar_version";
    echo "$remote_sjar_version" > $workingdir/.usedsjarversion;
    echo "$skip_counter" > $workingdir/.execution_number;
    yellow "DEPLOY on the cluster...";
    clab_all $workingdir DEPLOY;
    green -en "DONE.\n";
    sleep 10;

    yellow "SEEEX on the cluster...";
    clab_all $workingdir SEEEX;
    green -en "DONE.\n";

    for i in `seq 1 4`; do blue -en "$i.";sleep 5;done 

    yellow -en "\nNOW we go...\n";
    gui $workingdir &
    autoGuiPID="$!";
    yellow "WAITING for gui(pid=$autoGuiPID)";
    wait $autoGuiPID;
    green "Done with gui(return=$?)";

    yellow "KILLING all remaining";
    clab_all $workingdir KILL;


    ############################
    # REPEAT?

    if [ -f "$workingdir/.repeat" -a "`cat $workingdir/.repeat 2>/dev/null`" = "YES" ]; then
        yellow "REPEATING";
        unrepeatthis "$workingdir";
        repeat="1";
    else
        break; fi
done; # WHILE_REPEAT


    yellow "WAITING for disks sync on master: ";
    for i in `seq 1 9`; do blue -en "$i.";sleep 5;done 


    ############################
    # NOW MOVE STUFF

    yellow -en "\nMOVEY\n";
    movey $workingdir $destinationdir;

    green -en "\nCOMPLETE @`date`. \n\n\n";

done;
done;
done;
done;
done;
) &

just_wait $!;

green "ENDING @`date`";

