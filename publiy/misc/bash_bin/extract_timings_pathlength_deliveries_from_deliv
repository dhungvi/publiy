#!/bin/bash

source common.sh

if [ -z "$1" ]; then
    red "Missing working dir ($0)";
    exit -1; fi
workingdir="$1";

node_counter=0;
process1() {
    local resultsdir="$1";
    local tempdir="$2";
    local plotsdir="$3";
    blue "Process 1 on $resultsdir";

    # Process publishers
    for pubprop in $resultsdir/p*.properties; do
        node=`awk 'BEGIN{FS="="} /NodeName/{printf $NF}' $pubprop`;
        machineip=`awk 'BEGIN{FS="\\\\\\\\|:|="} /NodeAddress/ {printf $2}' $pubprop`;
        port=`awk 'BEGIN{FS="\\\\\\\\|:|="} /NodeAddress/ {printf $4}' $pubprop`;

        portstr="$portstr port[\"$node\"]=\"$port\";";
        nodestr="$nodestr machine[\"$node\"]=\"$machineip\";";
        machinestr="$machinestr node[\"$port\"]=\"$node\";";

        ((node_counter++));
        all_machines[$node_counter]="$machineip";
        all_ports[$node_counter]="$port";
        all_nodes[$node_counter]="$node";
    done

    subs_offset=`expr $node_counter + 1`;

    # Process subscribers
    for subprop in $resultsdir/s*.properties; do
        node=`awk 'BEGIN{FS="="} /NodeName/{printf $NF}' $subprop`;
        machineip=`awk 'BEGIN{FS="\\\\\\\\|:|="} /NodeAddress/ {printf $2}' $subprop`;
        port=`awk 'BEGIN{FS="\\\\\\\\|:|="} /NodeAddress/ {printf $4}' $subprop`;

        portstr="$portstr port[\"$node\"]=\"$port\";";
        nodestr="$nodestr machine[\"$node\"]=\"$machineip\";";
        machinestr="$machinestr node[\"$port\"]=\"$node\";";

        ((node_counter++));
        all_machines[$node_counter]="$machineip";
        all_ports[$node_counter]="$port";
        all_nodes[$node_counter]="$node";
    done

    for sub_index in `seq $subs_offset $node_counter`; do
        sub=${all_nodes[$sub_index]};
        sub_port=${all_ports[$sub_index]};
        sub_machine=${all_machines[$sub_index]};
        subresultsfile="$tempdir/${sub_machine}_${sub_port}.deliv";
        awk "BEGIN{print \"# TIME DISTANCE GTIME DTIME SRC_PORT SRC_SEQ\"} !/#/{print gensub(/([[:digit:]]*) TM_P[^\[]*\[ [^ ]* [^ ]* ([[:digit:]]*) ([[:digit:]]*) ([[:digit:]]*)\] Seq\[([[:digit:]]*):_([[:digit:]]*)\].*/,\"\\\\1 \\\\2 \\\\3 \\\\4 \\\\5 \\\\6\",1)}" $subresultsfile | awk "BEGIN{print \"# TIME SUBNODE SUBIP SUBPORT DTIME PUBNODE PUBIP PUBPORT GTIME HOPCOUNT PUBSEQ\"; $portstr $nodestr $machinestr} !/#/{print \$1\"\t$sub\",machine[\"$sub\"],port[\"$sub\"],\$3\"\t\"node[\$5],machine[node[\$5]],port[node[\$5]],\$4,\"\t\"\$2,\$6}";
    done > $plotsdir/delivery_pathlength_timings;
}

function process2() {
    local resultsdir="$1";
    local tempdir="$2";
    local plotsdir="$3";
    if [ ! -d "$plotsdir" ]; then
        mkdir $plotsdir; fi
    blue "Process 2 on $resultsdir";
    
    awk 'BEGIN{l=0;} !/#/{
            i=$2"_"$6;
            timing[i]=timing[i]"\t"($1)" "($5-$9)" "($10);
    } END {
            l=asorti(timing, sorted_indices);
            for(j=1;j<=l;j++){
                i=sorted_indices[j];
                print i"\t"timing[i];
            }
    }' $plotsdir/delivery_pathlength_timings > $plotsdir/delivery_pathlength_timings_grouped;
}

function process3() {
    local resultsdir="$1";
    local tempdir="$2";
    local plotsdir="$3";
    if [ ! -d "$plotsdir" ]; then
        mkdir $plotsdir; fi
    blue "Process 3 on $resultsdir";
    awk 'BEGIN{print "#Peer2Peer\tTotalTime\tTotalPathLen\tTotalDel\tAvgTime\tAvgPathLen"} !/#/{tot=0;totpath=0;for(i=2;i<=NF;i+=3){tot+=$(1+i); totpath+=$(i+2);} print $1"\t"tot"\t"totpath"\t"((NF-1)/3)"\t"(NF<=1?"--":(tot/((NF-1)/3)))"\t"(NF<=1?"--":(totpath/((NF-1)/3)))}' $plotsdir/delivery_pathlength_timings_grouped > $plotsdir/delivery_pathlength_timings_summary;
}

function process5() {
    local resultsdir="$1";
    local tempdir="$2";
    local plotsdir="$3";
    local p2psdir="$plotsdir/p2p";
    mkdir $p2psdir;
    blue "Process 5";
    p2p_all=`awk '{printf $1" "}' $plotsdir/delivery_pathlength_timings_grouped`;
    for p2p in $p2p_all; do
        awk "/$p2p/{for(i=2;i<=NF;i+=3) {print \$i\"\t\"\$(i+1)\"\t\"\$(i+2)}}"  $plotsdir/delivery_pathlength_timings_grouped > $p2psdir/$p2p;
    done
}

function process6() {
    local resultsdir="$1";
    local tempdir="$2";
    local plotsdir="$3";
    blue "Process 6 on $resultsdir";
    awk 'BEGIN{print "#PathLen\tPathLenMsgCount\tTotalMsgCount"} !/#/{for(i=2;i<=NF;i+=3){path_count[$(i+2)]++;}}END{max_path_len=asorti(path_count,dst); for(i=1;i<=max_path_len;i++){tot+=path_count[i];print i"\t"path_count[i]"\t"tot;}}' $plotsdir/delivery_pathlength_timings_grouped > $plotsdir/delivery_pathlength_timings_aggregate_summary;
}
 
if [ ! -d "$1" ]; then
    red "Results dir is not accessible";
    exit -1; fi
resultsdir="$1";
if [ -d "$2" ]; then
    tempdir="$2";
    shift;
else
    tempdir="$resultsdir/temp";
    if [ ! -d "$tempdir" ]; then
        red "No temp dir under results dir";
        exit -1; fi
fi

plotsdir="$resultsdir/plots";
if [ ! -d "$plotsdir" ]; then
    mkdir -p $plotsdir;
else
    red "Skipping $resultsdir"; fi
yellow "`basename $resultsdir`";
    wait_on_stop;

shift;
if [ -z "$1" ]; then
    process1 $resultsdir $tempdir $plotsdir;
    wait_on_stop;
    process2 $resultsdir $tempdir $plotsdir;
    wait_on_stop;
    process3 $resultsdir $tempdir $plotsdir;
    # wait_on_stop;
    # process4 $resultsdir $tempdir $plotsdir;
    # wait_on_stop;
    # process5 $resultsdir $tempdir $plotsdir;
    wait_on_stop;
    process6 $resultsdir $tempdir $plotsdir;
    green "DONE. `wc -l $plotsdir/delivery_pathlength_timings | awk '{printf $1}'`";
    exit 0;
fi


while [ ! -z "$1" ]; do
    if [ "$1" = "P1" ]; then
        process1 $resultsdir $tempdir $plotsdir;
    elif [ "$1" = "P2" ]; then
        process2 $resultsdir $tempdir $plotsdir;
    elif [ "$1" = "P3" ]; then
        process3 $resultsdir $tempdir $plotsdir;
    elif [ "$1" = "P4" ]; then
        red "Process 4 does not exist anymore!"
        # process4 $resultsdir $tempdir $plotsdir;
    elif [ "$1" = "P5" ]; then
        process5 $resultsdir $tempdir $plotsdir;
    elif [ "$1" = "P6" ]; then
        process6 $resultsdir $tempdir $plotsdir;
    fi
    shift;
done


